// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Recipe {
  id            Int     @default(autoincrement()) @id
  title         String?
  content       String?
  published     Boolean @default(false)
// TODO implement date created at
//  createdAt     DateTime  @default(now())
//  updatedAt     DateTime @updatedAt
  author        User?   @relation(fields: [authorId], references: [id])
  authorId      Int?
  comments      Comment[]
  keywords      String[]
  categories    Category[] @relation(references: [id])
  Ratings       Rating[]
  isKingRecipe  Boolean @default(false)
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  recipes       Recipe[]
  isKing        Boolean @default(false)
  role          Role @default(USER)
  ratingsGiven  Rating[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Comment {
  id            Int    @id @default(autoincrement())
  title         String
  content       String
  Recipe        Recipe? @relation(fields: [recipeId], references: [id])
  recipeId      Int?
  createdAt     DateTime @default(now())
}

model Tag {
  name String @id
}

model Rating {
  id            Int     @id @default(autoincrement())
  rating        Decimal
  recipe        Recipe   @relation(fields: [recipeId], references: [id])
  recipeId      Int
  user          User    @relation(fields: [userId], references: [id])
  userId        Int
}

model Category {
  id            Int @id @default(autoincrement())
  name          String?
  recipe        Recipe[]
}

enum Role {
  USER
  ADMIN
}